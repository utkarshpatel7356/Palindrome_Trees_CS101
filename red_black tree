//program to implement the red-black tree
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
//function prototypes
struct node *newnode(int data);
struct tree *newtree();
void leftrotate(struct tree *t,struct node *x);
void rightrotate(struct tree *t,struct node *x);
void insert(struct tree *t,struct node *z);
void insertfixup(struct tree *t,struct node *z);
void transplant(struct tree *t,struct node *u,struct node *v);
struct node *minimum(struct tree *t,struct node *x);
void delete(struct tree *t,struct node *z);
void deletefixup(struct tree *t,struct node *x);
void print(struct tree *t,struct node *x);
struct node *search(struct tree *t,struct node *x,int data);
//structure of the node
struct node
{
    int data;
    char color;
    struct node *left,*right,*parent;
};
//structure of the tree
struct tree
{
    struct node *root;
    struct node *nil;
};
//function to create a new node
struct node *newnode(int data)
{
    struct node *temp=(struct node *)malloc(sizeof(struct node));
    temp->data=data;
    temp->left=NULL;
    temp->right=NULL;
    temp->parent=NULL;
    temp->color='r';
    return temp;
}   
//function to create a new tree
struct tree *newtree()
{
    struct tree *t=(struct tree *)malloc(sizeof(struct tree));
    t->nil=newnode(-1);
    t->nil->color='b';
    t->root=t->nil;
    return t;
}
//function to left rotate the tree
void leftrotate(struct tree *t,struct node *x)
{
    struct node *y=x->right;
    x->right=y->left;
    if(y->left!=t->nil)
        y->left->parent=x;
    y->parent=x->parent;
    if(x->parent==t->nil)
        t->root=y;
    else if(x==x->parent->left)
        x->parent->left=y;
    else
        x->parent->right=y;
    y->left=x;
    x->parent=y;
}
//function to right rotate the tree
void rightrotate(struct tree *t,struct node *x)
{
    struct node *y=x->left;
    x->left=y->right;
    if(y->right!=t->nil)
        y->right->parent=x;
    y->parent=x->parent;
    if(x->parent==t->nil)
        t->root=y;
    else if(x==x->parent->left)
        x->parent->left=y;
    else
        x->parent->right=y;
    y->right=x;
    x->parent=y;
}
//function to insert a node in the tree
void insert(struct tree *t,struct node *z)
{
    struct node *y=t->nil;
    struct node *x=t->root;
    while(x!=t->nil)
    {
        y=x;
        if(z->data<x->data)
            x=x->left;
        else
            x=x->right;
    }
    z->parent=y;
    if(y==t->nil)
        t->root=z;
    else if(z->data<y->data)
        y->left=z;
    else
        y->right=z;
    z->left=t->nil;
    z->right=t->nil;
    z->color='r';
    insertfixup(t,z);
}
//function to fix the tree after insertion
void insertfixup(struct tree *t,struct node *z)
{
    while(z->parent->color=='r')
    {
        if(z->parent==z->parent->parent->left)
        {
            struct node *y=z->parent->parent->right;
            if(y->color=='r')
            {
                z->parent->color='b';
                y->color='b';
                z->parent->parent->color='r';
                z=z->parent->parent;
            }
            else
            {
                if(z==z->parent->right)
                {
                    z=z->parent;
                    leftrotate(t,z);
                }
                z->parent->color='b';
                z->parent->parent->color='r';
                rightrotate(t,z->parent->parent);
            }
        }
        else
        {
            struct node *y=z->parent->parent->left;
            if(y->color=='r')
            {
                z->parent->color='b';
                y->color='b';
                z->parent->parent->color='r';
                z=z->parent->parent;
            }
            else
            {
                if(z==z->parent->left)
                {
                    z=z->parent;
                    rightrotate(t,z);
                }
                z->parent->color='b';
                z->parent->parent->color='r';
                leftrotate(t,z->parent->parent);
            }
        }
    }
    t->root->color='b';
}
//function to transplant the tree
void transplant(struct tree *t,struct node *u,struct node *v)
{
    if(u->parent==t->nil)
        t->root=v;
    else if(u==u->parent->left)
        u->parent->left=v;
    else
        u->parent->right=v;
    v->parent=u->parent;
}
//function to find the minimum node
struct node *minimum(struct tree *t,struct node *x)
{
    while(x->left!=t->nil)
        x=x->left;
    return x;
}
//function to delete a node from the tree
void delete(struct tree *t,struct node *z)
{
    struct node *y=z;
    struct node *x;
    char yoc=y->color;
    if(z->left==t->nil)
    {
        x=z->right;
        transplant(t,z,z->right);
    }
    else if(z->right==t->nil)
    {
        x=z->left;
        transplant(t,z,z->left);
    }
    else
    {
        y=minimum(t,z->right);
        yoc=y->color;
        x=y->right;
        if(y->parent==z)
            x->parent=y;
        else
        {
            transplant(t,y,y->right);
            y->right=z->right;
            y->right->parent=y;
        }
        transplant(t,z,y);
        y->left=z->left;
        y->left->parent=y;
        y->color=z->color;
    }
    if(yoc=='b')
        deletefixup(t,x);
}   
//function to fix the tree after deletion
void deletefixup(struct tree *t,struct node *x)
{
    while(x!=t->root && x->color=='b')
    {
        if(x==x->parent->left)
        {
            struct node *w=x->parent->right;
            if(w->color=='r')
            {
                w->color='b';
                x->parent->color='r';
                leftrotate(t,x->parent);
                w=x->parent->right;
            }
            if(w->left->color=='b' && w->right->color=='b')
            {
                w->color='r';
                x=x->parent;
            }
            else
            {
                if(w->right->color=='b')
                {
                    w->left->color='b';
                    w->color='r';
                    rightrotate(t,w);
                    w=x->parent->right;
                }
                w->color=x->parent->color;
                x->parent->color='b';
                w->right->color='b';
                leftrotate(t,x->parent);
                x=t->root;
            }
        }
        else
        {
            struct node *w=x->parent->left;
            if(w->color=='r')
            {
                w->color='b';
                x->parent->color='r';
                rightrotate(t,x->parent);
                w=x->parent->left;
            }
            if(w->right->color=='b' && w->left->color=='b')
            {
                w->color='r';
                x=x->parent;
            }
            else
            {
                if(w->left->color=='b')
                {
                    w->right->color='b';
                    w->color='r';
                    leftrotate(t,w);
                    w=x->parent->left;
                }
                w->color=x->parent->color;
                x->parent->color='b';
                w->left->color='b';
                rightrotate(t,x->parent);
                x=t->root;
            }
        }
    }
    x->color='b';
}
//function to print the tree
void print(struct tree *t,struct node *x)
{
    if(x!=t->nil)
    {
        print(t,x->left);
        printf("%d %c\n",x->data,x->color);
        print(t,x->right);
    }
}
//function to search a node in the tree
struct node *search(struct tree *t,struct node *x,int data)
{
    if(x==t->nil || data==x->data)
        return x;
    if(data<x->data)
        return search(t,x->left,data);
    else
        return search(t,x->right,data);
}
//main function
void main(){
    struct tree *t=newtree();
    int n;
    printf("Enter the number of nodes: ");
    scanf("%d",&n);
    printf("Enter the nodes: ");
    for(int i=0;i<n;i++)
    {
        int data;
        scanf("%d",&data);
        struct node *temp=newnode(data);
        insert(t,temp);
    }
    printf("The tree is:\n");
    print(t,t->root);
    printf("Enter the node to be deleted: ");
    int data;
    scanf("%d",&data);
    struct node *temp=search(t,t->root,data);
    if(temp==t->nil)
        printf("Node not found\n");
    else
    {
        delete(t,temp);
        printf("The tree after deletion is:\n");
        print(t,t->root);
    }
}
